/**
 * AI Service Test Script
 *
 * Manual test for HazardIdentifierAgent
 * Run with: npm run test:ai
 *
 * Requirements:
 * - ANTHROPIC_API_KEY must be configured in .env
 * - API key must start with sk-ant-api03-
 */

import 'dotenv/config';
import { aiService } from './services/ai.service.js';
import type { HazardIdentifierInput } from './lib/ai/agents/hazard-identifier.agent.js';

// =============================================================================
// Test Cases
// =============================================================================

const TEST_CASES: { name: string; input: HazardIdentifierInput }[] = [
  {
    name: 'üë®‚Äçüíª Programer (–°–µ–¥–µ—ö–µ + –ï–∫—Ä–∞–Ω–∏)',
    input: {
      positionName: '–ü—Ä–æ–≥—Ä–∞–º–µ—Ä',
      jobDescription: '–ü–∏—à–µ –∫–æ–¥ –∑–∞ –≤–µ–± –∞–ø–ª–∏–∫–∞—Ü–∏—ò–µ, —É—á–µ—Å—Ç–≤—É—ò–µ —É team meeting-–∏–º–∞, —Ä–∞–¥–∏ code review',
      equipment: ['–ö–æ–º–ø—ò—É—Ç–µ—Ä', '2 –º–æ–Ω–∏—Ç–æ—Ä–∞', '–¢–∞—Å—Ç–∞—Ç—É—Ä–∞', '–ú–∏—à'],
      workspace: '–ö–∞–Ω—Ü–µ–ª–∞—Ä–∏—ò–∞ (–∑–∞—Ç–≤–æ—Ä–µ–Ω –ø—Ä–æ—Å—Ç–æ—Ä)',
      workHours: {
        daily: 8,
        overtime: true,
        shifts: false,
        nightWork: false,
      },
    },
  },
  {
    name: 'üöú –í–∏—ô—É—à–∫–∞—Ä–∏—Å—Ç–∞ (–ú–∞—à–∏–Ω–µ + –°–∞–æ–±—Ä–∞—õ–∞—ò)',
    input: {
      positionName: '–í–∏—ô—É—à–∫–∞—Ä–∏—Å—Ç–∞',
      jobDescription: '–£–ø—Ä–∞–≤—ô–∞ –≤–∏—ô—É—à–∫–∞—Ä–æ–º —É –º–∞–≥–∞—Ü–∏–Ω—É, –ø—Ä–µ–Ω–æ—Å–∏ —Ç–µ—Ä–µ—Ç, —É—Ç–æ–≤–∞—Ä—É—ò–µ –∫–∞–º–∏–æ–Ω–µ',
      equipment: ['–í–∏—ô—É—à–∫–∞—Ä (–µ–ª–µ–∫—Ç—Ä–∏—á–Ω–∏)', '–ü–∞–ª–µ—Ç–Ω–µ –¥–∏–∑–∞–ª–∏—Ü–µ'],
      workspace: '–ú–∞–≥–∞—Ü–∏–Ω —Å–∞ –≤–∏—Å–æ–∫–∏–º –ø–æ–ª–∏—Ü–∞–º–∞',
      workHours: {
        daily: 8,
        shifts: true,
        nightWork: false,
        overtime: false,
      },
    },
  },
  {
    name: 'üëî –ò–∑–≤—Ä—à–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä (–°—Ç—Ä–µ—Å + –û–¥–≥–æ–≤–æ—Ä–Ω–æ—Å—Ç)',
    input: {
      positionName: '–ò–∑–≤—Ä—à–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      jobDescription: '–†—É–∫–æ–≤–æ–¥–∏ –∫–æ–º–ø–∞–Ω–∏—ò–æ–º, –¥–æ–Ω–æ—Å–∏ —Å—Ç—Ä–∞—Ç–µ—à–∫–µ –æ–¥–ª—É–∫–µ, —É—á–µ—Å—Ç–≤—É—ò–µ —É —Å–∞—Å—Ç–∞–Ω—Ü–∏–º–∞ —Å–∞ –∫–ª–∏—ò–µ–Ω—Ç–∏–º–∞',
      equipment: ['–õ–∞–ø—Ç–æ–ø', '–ú–æ–±–∏–ª–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω'],
      workspace: '–ö–∞–Ω—Ü–µ–ª–∞—Ä–∏—ò–∞ + —Ç–µ—Ä–µ–Ω—Å–∫–∏ —Å–∞—Å—Ç–∞–Ω—Ü–∏',
      workHours: {
        daily: 10,
        overtime: true,
        shifts: false,
        nightWork: false,
      },
    },
  },
];

// =============================================================================
// Main Test Function
// =============================================================================

async function runTests() {
  console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ  ü§ñ BZR Portal - AI Hazard Identifier Test             ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

  // Check if AI is available
  const isAvailable = aiService.isAvailable();

  if (!isAvailable) {
    console.log('‚ùå ANTHROPIC_API_KEY nije konfigurisan!\n');
    console.log('Koraci za konfigurisanje:');
    console.log('1. Registruj se na https://console.anthropic.com/');
    console.log('2. Kreiraj API key');
    console.log('3. Dodaj u backend/.env:');
    console.log('   ANTHROPIC_API_KEY=sk-ant-api03-...\n');
    process.exit(1);
  }

  console.log('‚úÖ API Key konfigurisan\n');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // Run tests
  for (const testCase of TEST_CASES) {
    console.log(`\nüìã TEST: ${testCase.name}`);
    console.log('‚îÄ'.repeat(60));
    console.log(`–ü–æ–∑–∏—Ü–∏—ò–∞: ${testCase.input.positionName}`);
    console.log(`–û–ø–∏—Å: ${testCase.input.jobDescription}`);
    console.log(`–û–ø—Ä–µ–º–∞: ${testCase.input.equipment.join(', ')}`);
    console.log(`–ü—Ä–æ—Å—Ç–æ—Ä: ${testCase.input.workspace}`);
    console.log(`–†–∞–¥–Ω–æ –≤—Ä–µ–º–µ: ${testCase.input.workHours.daily}h –¥–Ω–µ–≤–Ω–æ${testCase.input.workHours.overtime ? ' + –ø—Ä–µ–∫–æ–≤—Ä–µ–º–µ–Ω–∏' : ''}`);
    console.log('');

    try {
      const startTime = Date.now();
      const result = await aiService.suggestHazards(testCase.input);
      const duration = Date.now() - startTime;

      if (result.success) {
        console.log(`‚úÖ AI —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–æ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (${duration}ms)\n`);

        result.suggestions.forEach((suggestion, idx) => {
          console.log(`${idx + 1}. –®–∏—Ñ—Ä–∞: ${suggestion.hazardCode} | –ü–æ—É–∑–¥–∞–Ω–æ—Å—Ç: ${(suggestion.confidence * 100).toFixed(0)}%`);
          console.log(`   üí¨ ${suggestion.rationale}`);
          console.log('');
        });

        console.log(`üìä –£–∫—É–ø–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: ${result.suggestions.length} –æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n`);
      } else {
        console.log(`‚ö†Ô∏è  AI fallback - ${result.source}`);
        console.log(`–ì—Ä–µ—à–∫–∞: ${result.error}`);
        console.log(`–ü–æ—Ä—É–∫–∞ –∫–æ—Ä–∏—Å–Ω–∏–∫—É: ${result.userMessage}\n`);
      }
    } catch (error) {
      console.log('‚ùå –ì–†–ï–®–ö–ê:', error instanceof Error ? error.message : 'Unknown error');
    }

    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
  }

  console.log('\n‚úÖ –°–≤–∏ —Ç–µ—Å—Ç–æ–≤–∏ –∑–∞–≤—Ä—à–µ–Ω–∏!\n');
}

// =============================================================================
// Run
// =============================================================================

runTests().catch((error) => {
  console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ì–†–ï–®–ö–ê:', error);
  process.exit(1);
});
