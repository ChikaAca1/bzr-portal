/**
 * AI Semantic Caching Test Script (Phase 3b)
 *
 * Demonstrates the semantic caching system:
 * 1. First call: AI (slow, expensive)
 * 2. Same job: Cache hit (instant, free)
 * 3. Similar job (different wording): Semantic cache hit (instant, free)
 * 4. Different job: AI call again
 *
 * Run with: npm run test:ai:cache
 */

import 'dotenv/config';
import { aiService } from './services/ai.service.js';
import { aiCacheService } from './services/ai-cache.service.js';
import type { HazardIdentifierInput } from './lib/ai/agents/hazard-identifier.agent.js';

// =============================================================================
// Test Configuration
// =============================================================================

const TEST_COMPANY_ID = 1; // Mock company ID for testing

// =============================================================================
// Test Cases - Similar Jobs with Different Wording
// =============================================================================

const CLEANER_JOB_VARIATIONS: HazardIdentifierInput[] = [
  // Original job
  {
    positionName: '–ß–∏—Å—Ç–∞—á –ø–∏—ò–∞—Ü–µ',
    jobDescription: '–ß–∏—Å—Ç–∏ –ø–∏—ò–∞—á–Ω–µ –ø–æ–≤—Ä—à–∏–Ω–µ –º–µ—Ç–ª–æ–º –∏ –ª–æ–ø–∞—Ç–æ–º, –æ–¥–Ω–æ—Å–∏ —Å–º–µ—õ–µ',
    equipment: ['–ú–µ—Ç–ª–∞', '–õ–æ–ø–∞—Ç–∞', '–ö–æ—Ä–ø–µ –∑–∞ –æ—Ç–ø–∞–¥'],
    workspace: '–û—Ç–≤–æ—Ä–µ–Ω –ø–∏—ò–∞—á–Ω–∏ –ø—Ä–æ—Å—Ç–æ—Ä',
    workHours: { daily: 8, shifts: false },
  },

  // Same job, different wording (should get cache hit with ~90% similarity)
  {
    positionName: '–ú–∞–Ω–∏–ø—É–ª–∞—Ç–æ—Ä –æ—Ç–ø–∞–¥–∞–∫–∞ –º–µ—Ç–ª–æ–º —É –ø–∏—ò–∞—á–Ω–æ–º –ø—Ä–æ—Å—Ç–æ—Ä—É',
    jobDescription: '–û–¥—Ä–∂–∞–≤–∞ —á–∏—Å—Ç–æ—õ—É –Ω–∞ –ø–∏—ò–∞—Ü–∏ –∫–æ—Ä–∏—Å—Ç–µ—õ–∏ –º–µ—Ç–ª—É, —Å–∞–∫—É–ø—ô–∞ –∏ –æ–¥–Ω–æ—Å–∏ –æ—Ç–ø–∞—Ç–∫–µ',
    equipment: ['–ú–µ—Ç–ª–∞ –∑–∞ —á–∏—à—õ–µ—ö–µ', '–õ–æ–ø–∞—Ç–∞', '–ö–∞–Ω—Ç–µ –∑–∞ —Å–º–µ—õ–µ'],
    workspace: '–ü–∏—ò–∞—á–Ω–∏ –ø–ª–∞—Ç–æ –Ω–∞ –æ—Ç–≤–æ—Ä–µ–Ω–æ–º',
    workHours: { daily: 8, shifts: false },
  },

  // Another variation (should also get cache hit)
  {
    positionName: '–ß–∏—Å—Ç–∞—á –ø–∏—ò–∞—á–Ω–æ–≥ –ø–ª–∞—Ç–æ–∞',
    jobDescription: '–û–¥—Ä–∂–∞–≤–∞ —Ö–∏–≥–∏—ò–µ–Ω—É –ø–∏—ò–∞—á–Ω–∏—Ö –ø–æ–≤—Ä—à–∏–Ω–∞, —á–∏—Å—Ç–∏ –º–µ—Ç–ª–æ–º, –æ–¥–ª–∞–∂–µ —Å–º–µ—õ–µ',
    equipment: ['–ú–µ—Ç–ª–∞', '–õ–æ–ø–∞—Ç–∞ –∑–∞ —Å–º–µ—õ–µ'],
    workspace: '–û—Ç–≤–æ—Ä–µ–Ω–∞ –ø–∏—ò–∞—Ü–∞',
    workHours: { daily: 8, shifts: false },
  },
];

const PROGRAMMER_JOB: HazardIdentifierInput = {
  positionName: '–ü—Ä–æ–≥—Ä–∞–º–µ—Ä',
  jobDescription: '–ü–∏—à–µ –∫–æ–¥ –∑–∞ –≤–µ–± –∞–ø–ª–∏–∫–∞—Ü–∏—ò–µ, —É—á–µ—Å—Ç–≤—É—ò–µ —É team meeting-–∏–º–∞',
  equipment: ['–ö–æ–º–ø—ò—É—Ç–µ—Ä', '2 –º–æ–Ω–∏—Ç–æ—Ä–∞'],
  workspace: '–ö–∞–Ω—Ü–µ–ª–∞—Ä–∏—ò–∞',
  workHours: { daily: 8, overtime: true },
};

// =============================================================================
// Test Execution
// =============================================================================

async function runCacheTests() {
  console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ  üß† BZR Portal - Semantic Caching Test                     ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');

  // Clear cache for clean test
  console.log('üóëÔ∏è  Clearing cache for clean test...\n');
  await aiCacheService.clear(TEST_COMPANY_ID);

  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== TEST 1: Initial call (cache miss) =====
  console.log('üìã TEST 1: –ß–∏—Å—Ç–∞—á –ø–∏—ò–∞—Ü–µ (PRVI PUT - AI poziv)');
  console.log('‚îÄ'.repeat(60));

  const start1 = Date.now();
  const result1 = await aiService.suggestHazards(CLEANER_JOB_VARIATIONS[0], TEST_COMPANY_ID);
  const duration1 = Date.now() - start1;

  if (result1.success) {
    console.log(`‚úÖ Izvor: ${result1.source} | Vreme: ${duration1}ms`);
    console.log(`   Predlo≈æeno opasnosti: ${result1.suggestions.length}`);
    result1.suggestions.forEach((s, i) => {
      console.log(`   ${i + 1}. ≈†ifra ${s.hazardCode} (${(s.confidence * 100).toFixed(0)}%)`);
    });
  } else {
    console.log(`‚ùå Gre≈°ka: ${result1.error}`);
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== TEST 2: Same job (exact cache hit) =====
  console.log('üìã TEST 2: ƒåistaƒç pijace (ISTI POSAO - oƒçekujem cache hit)');
  console.log('‚îÄ'.repeat(60));

  const start2 = Date.now();
  const result2 = await aiService.suggestHazards(CLEANER_JOB_VARIATIONS[0], TEST_COMPANY_ID);
  const duration2 = Date.now() - start2;

  if (result2.success) {
    console.log(`‚úÖ Izvor: ${result2.source} | Vreme: ${duration2}ms`);
    if (result2.source === 'CACHE') {
      console.log(`   üéØ Sliƒçnost: ${((result2.similarity || 0) * 100).toFixed(1)}%`);
      console.log(`   ‚ö° Ubrzanje: ${(duration1 / duration2).toFixed(1)}x br≈æe!`);
      console.log(`   üí∞ U≈°teda: $${((duration1 / 1000) * 0.003).toFixed(4)}`);
    }
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== TEST 3: Similar job, different wording (semantic cache hit) =====
  console.log('üìã TEST 3: Manipulator otpadaka (SLIƒåNI POSAO - semantic match)');
  console.log('‚îÄ'.repeat(60));
  console.log('Opis: "Odr≈æava ƒçistoƒáu na pijaci..." (drugaƒçije reƒçi, isti posao)');

  const start3 = Date.now();
  const result3 = await aiService.suggestHazards(CLEANER_JOB_VARIATIONS[1], TEST_COMPANY_ID);
  const duration3 = Date.now() - start3;

  if (result3.success) {
    console.log(`‚úÖ Izvor: ${result3.source} | Vreme: ${duration3}ms`);
    if (result3.source === 'CACHE') {
      console.log(`   üéØ Sliƒçnost: ${((result3.similarity || 0) * 100).toFixed(1)}%`);
      console.log(`   üß† Sistem prepoznao sliƒçne poslove!`);
      console.log(`   ‚ö° Ubrzanje: ${(duration1 / duration3).toFixed(1)}x br≈æe!`);
    } else if (result3.source === 'AI') {
      console.log(`   ‚ö†Ô∏è  Cache miss - sliƒçnost ispod praga (threshold: 85%)`);
    }
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== TEST 4: Another variation =====
  console.log('üìã TEST 4: ƒåistaƒç pijaƒçnog platoa (TREƒÜA VARIJACIJA)');
  console.log('‚îÄ'.repeat(60));

  const start4 = Date.now();
  const result4 = await aiService.suggestHazards(CLEANER_JOB_VARIATIONS[2], TEST_COMPANY_ID);
  const duration4 = Date.now() - start4;

  if (result4.success) {
    console.log(`‚úÖ Izvor: ${result4.source} | Vreme: ${duration4}ms`);
    if (result4.source === 'CACHE') {
      console.log(`   üéØ Sliƒçnost: ${((result4.similarity || 0) * 100).toFixed(1)}%`);
    }
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== TEST 5: Different job (cache miss) =====
  console.log('üìã TEST 5: Programer (POTPUNO DRUGAƒåIJI POSAO - AI poziv)');
  console.log('‚îÄ'.repeat(60));

  const start5 = Date.now();
  const result5 = await aiService.suggestHazards(PROGRAMMER_JOB, TEST_COMPANY_ID);
  const duration5 = Date.now() - start5;

  if (result5.success) {
    console.log(`‚úÖ Izvor: ${result5.source} | Vreme: ${duration5}ms`);
    console.log(`   Predlo≈æeno opasnosti: ${result5.suggestions.length}`);
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== Cache Statistics =====
  console.log('üìä CACHE STATISTIKA');
  console.log('‚îÄ'.repeat(60));

  const stats = await aiCacheService.getStats(TEST_COMPANY_ID);
  console.log(`Ukupno u cache-u: ${stats.totalEntries} poslova`);
  console.log(`Ukupno reuse-ovanja: ${stats.totalReuses}`);
  console.log(`Proseƒçna pouzdanost: ${(stats.avgConfidence * 100).toFixed(1)}%`);

  if (stats.topPositions.length > 0) {
    console.log('\nNajƒçe≈°ƒáe kori≈°ƒáeni poslovi:');
    stats.topPositions.forEach((pos, i) => {
      console.log(`  ${i + 1}. ${pos.position} (${pos.usageCount}x)`);
    });
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  // ===== Summary =====
  console.log('üìà REZIME');
  console.log('‚îÄ'.repeat(60));

  const totalCalls = 5;
  const aiCalls = [result1, result3, result5].filter((r) => r.success && r.source === 'AI').length;
  const cacheCalls = [result2, result4].filter((r) => r.success && r.source === 'CACHE').length;
  const cacheHitRate = (cacheCalls / totalCalls) * 100;

  console.log(`Ukupno poziva: ${totalCalls}`);
  console.log(`AI pozivi: ${aiCalls} (~$${(aiCalls * 0.003).toFixed(3)})`);
  console.log(`Cache hits: ${cacheCalls} ($0)`);
  console.log(`Cache hit rate: ${cacheHitRate.toFixed(0)}%`);

  const avgAiTime = [duration1, duration5].reduce((a, b) => a + b, 0) / 2;
  const avgCacheTime = duration2; // Example
  console.log(`\nProseƒçno vreme (AI): ${avgAiTime.toFixed(0)}ms`);
  console.log(`Proseƒçno vreme (Cache): ${avgCacheTime.toFixed(0)}ms`);
  console.log(`Ubrzanje: ${(avgAiTime / avgCacheTime).toFixed(1)}x\n`);

  console.log('‚úÖ Svi testovi zavr≈°eni!\n');
}

// =============================================================================
// Run
// =============================================================================

runCacheTests().catch((error) => {
  console.error('\n‚ùå KRITIƒåNA GRE≈†KA:', error);
  process.exit(1);
});
