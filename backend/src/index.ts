import 'dotenv/config';
import { Hono } from 'hono';
import { serve } from '@hono/node-server';
import { cors } from 'hono/cors';
import { logger } from 'hono/logger';
import { prettyJSON } from 'hono/pretty-json';
import { rateLimiter } from 'hono-rate-limiter';
import { fetchRequestHandler } from '@trpc/server/adapters/fetch';
import { appRouter } from './api/trpc/router';
import { createContext } from './api/trpc/context';
import { db } from './db';
import { contactFormSubmissions } from './db/schema';
import { sendContactFormEmail } from './services/email.service';
import aiRoutes from './routes/ai';

/**
 * BZR Portal Backend Server
 *
 * Hono framework with tRPC integration for type-safe API.
 * Implements Serbian BZR law compliance requirements.
 */

const app = new Hono();

// Environment variables
const PORT = parseInt(process.env.PORT || '3000', 10);
const CORS_ORIGINS = process.env.CORS_ORIGIN
  ? process.env.CORS_ORIGIN.split(',').map(origin => origin.trim())
  : ['http://localhost:5173'];

// Global middleware
app.use('*', logger());
app.use('*', prettyJSON());
app.use(
  '*',
  cors({
    origin: CORS_ORIGINS,
    credentials: true,
  })
);

// Health check endpoint
app.get('/health', (c) => {
  return c.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: 'BZR Portal Backend',
    version: '1.0.0',
  });
});

// Contact form endpoint (public, with rate limiting)
const contactLimiter = rateLimiter({
  windowMs: 15 * 60 * 1000, // 15 minutes
  limit: 100, // Max 100 requests per window per IP
  standardHeaders: 'draft-6',
  keyGenerator: (c) => c.req.header('x-forwarded-for') || c.req.header('x-real-ip') || 'unknown',
});

app.post('/api/contact', contactLimiter, async (c) => {
  try {
    const body = await c.req.json();

    // Validation
    const { name, email, companyName, message, website } = body;

    // Honeypot check - reject if website field is filled (bot detection)
    if (website && website.trim() !== '') {
      return c.json({ success: false, error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–ª–∞—ö—É –ø–æ—Ä—É–∫–µ. –ü–æ–∫—É—à–∞—ò—Ç–µ –ø–æ–Ω–æ–≤–æ.' }, 400);
    }

    // Required fields validation
    if (!name || name.trim().length === 0) {
      return c.json({ success: false, error: '–ò–º–µ —ò–µ –æ–±–∞–≤–µ–∑–Ω–æ' }, 400);
    }
    if (!email || !email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      return c.json({ success: false, error: 'Email –∞–¥—Ä–µ—Å–∞ –Ω–∏—ò–µ –≤–∞–ª–∏–¥–Ω–∞' }, 400);
    }
    if (!message || message.trim().length < 10) {
      return c.json({ success: false, error: '–ü–æ—Ä—É–∫–∞ –º–æ—Ä–∞ –∏–º–∞—Ç–∏ –Ω–∞—ò–º–∞—ö–µ 10 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∞' }, 400);
    }

    // Length validation
    if (name.length > 255 || email.length > 255) {
      return c.json({ success: false, error: '–ò–º–µ –∏–ª–∏ email —Å—É –ø—Ä–µ–¥—É–≥–∞—á–∫–∏' }, 400);
    }
    if (companyName && companyName.length > 255) {
      return c.json({ success: false, error: '–ù–∞–∑–∏–≤ –∫–æ–º–ø–∞–Ω–∏—ò–µ —ò–µ –ø—Ä–µ–¥—É–≥–∞—á–∞–∫' }, 400);
    }
    if (message.length > 5000) {
      return c.json({ success: false, error: '–ü–æ—Ä—É–∫–∞ —ò–µ –ø—Ä–µ–¥—É–≥–∞—á–∫–∞ (–º–∞–∫—Å–∏–º—É–º 5000 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∞)' }, 400);
    }

    // Insert into database
    const [submission] = await db
      .insert(contactFormSubmissions)
      .values({
        name: name.trim(),
        email: email.trim().toLowerCase(),
        companyName: companyName?.trim() || null,
        message: message.trim(),
        submittedAt: new Date(),
        status: 'new',
      })
      .returning();

    // Send email notification to support team
    const supportEmail = process.env.SUPPORT_EMAIL || 'info@bzrportal.rs';
    try {
      await sendContactFormEmail(supportEmail, {
        name: submission.name,
        email: submission.email,
        companyName: submission.companyName || undefined,
        message: submission.message,
        submittedAt: submission.submittedAt,
        submissionId: submission.id,
      });
    } catch (emailError) {
      console.error('Email send failed (submission saved):', emailError);
      // Don't fail the request if email fails - submission is in DB
    }

    return c.json({
      success: true,
      message: '–ü–æ—Ä—É–∫–∞ —ò–µ –ø–æ—Å–ª–∞—Ç–∞. –û–¥–≥–æ–≤–æ—Ä–∏—õ–µ–º–æ —É —Ä–æ–∫—É –æ–¥ 24 —Å–∞—Ç–∞.',
    });
  } catch (error) {
    console.error('Contact form error:', error);
    return c.json(
      {
        success: false,
        error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–ª–∞—ö—É –ø–æ—Ä—É–∫–µ. –ü–æ–∫—É—à–∞—ò—Ç–µ –ø–æ–Ω–æ–≤–æ.',
      },
      500
    );
  }
});

// AI Chat routes
app.route('/api/ai', aiRoutes);

// tRPC endpoint
app.all('/trpc/*', async (c) => {
  return fetchRequestHandler({
    endpoint: '/trpc',
    req: c.req.raw,
    router: appRouter,
    createContext,
    onError({ error, path }) {
      console.error(`tRPC Error on ${path}:`, error);
    },
  });
});

// 404 handler
app.notFound((c) => {
  return c.json(
    {
      error: 'Not Found',
      message: '–¢—Ä–∞–∂–µ–Ω–∞ —Ä—É—Ç–∞ –Ω–µ –ø–æ—Å—Ç–æ—ò–∏',
      path: c.req.path,
    },
    404
  );
});

// Error handler
app.onError((err, c) => {
  console.error('Server Error:', err);
  return c.json(
    {
      error: 'Internal Server Error',
      message: err.message,
    },
    500
  );
});

// Start server
console.log(`üöÄ BZR Portal Backend starting on port ${PORT}...`);

serve(
  {
    fetch: app.fetch,
    port: PORT,
  },
  (info) => {
    console.log(`‚úÖ Server running at http://localhost:${info.port}`);
    console.log(`üì° tRPC endpoint: http://localhost:${info.port}/trpc`);
    console.log(`üíö Health check: http://localhost:${info.port}/health`);
    console.log(`üåê CORS origin: ${CORS_ORIGIN}`);
  }
);

export default app;
